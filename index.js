const { Telegraf, Markup, session } = require("telegraf");
require("dotenv").config();
const fs = require("fs");
const request = require("request");
const token = process.env.BOT_TOKEN;

const bot = new Telegraf(token);
bot.use(session());

bot.use((ctx, next) => {
  ctx.session = ctx.session || {};
  next();
});
// Variables
let cart = {};
let orderFormData = {};
let { orderNumber, orders, saveOrdersToFile } = require("./modules/orders");
const products = require("./modules/catalog");

bot.command("start", (ctx) => {
  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("RU", "ru"),
    Markup.button.callback("EN", "en"),
  ]);
  ctx.reply("üåê", inlineKeyboard);
});

bot.action("ru", (ctx) => {});
function mainMenu() {
  return Markup.keyboard([["üìÅ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"], ["üõí –ö–æ—Ä–∑–∏–Ω–∞"]]).resize();
}

bot.command("start", (ctx) => {
  const keyboard = mainMenu();
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?`,
    keyboard
  );
});

// Main menu
bot.hears("üìÅ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", (ctx) => {
  const inlineKeyboard = Markup.inlineKeyboard(
    Object.keys(products).map((category) =>
      Markup.button.callback(`${category} üîΩ`, `openGoods_${category}`)
    )
  );
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", inlineKeyboard);
});

bot.hears("üõí –ö–æ—Ä–∑–∏–Ω–∞", (ctx) => {
  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "sendForm"),
    Markup.button.callback("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "clearCart"),
  ]);
  const cartContent = getCartContent(ctx, "add");
  ctx.replyWithHTML(
    `<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n${cartContent}`,
    inlineKeyboard
  );
});

// Catalog__categories goods extends category name

function openGoods(ctx, name) {
  const categoryProducts = products[name];
  categoryProducts.forEach((product) => {
    const inlineKeyboard = Markup.inlineKeyboard([
      Markup.button.callback(
        "1Ô∏è‚É£",
        `addToCart_${product.name}_1_${product.price}`
      ),
      Markup.button.callback(
        "2Ô∏è‚É£",
        `addToCart_${product.name}_2_${product.price}`
      ),
      Markup.button.callback(
        "3Ô∏è‚É£",
        `addToCart_${product.name}_3_${product.price}`
      ),
      Markup.button.callback(
        "5Ô∏è‚É£",
        `addToCart_${product.name}_5_${product.price}`
      ),
      Markup.button.callback(
        "üîü",
        `addToCart_${product.name}_10_${product.price}`
      ),
    ]);
    if (name === "–¢—Ä–∞–≤–∞") {
      const content = `<b>üõç ${product.name}</b>\n${product.happy}\n${product.power}\n\nüíµ ${product.price}\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –≥—Ä:`;
      ctx.replyWithHTML(content, inlineKeyboard);
    } else {
      const content = `<b>üõç ${product.name}</b>\n${product.happy}\n${product.power}\n\nüíµ ${product.price}\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É —à—Ç:`;
      ctx.replyWithHTML(content, inlineKeyboard);
    }
  });
}

function sendForm(ctx) {
  const content = getCartContent(ctx, "check");
  if (Object.keys(content).length > 0) {
    ctx.reply("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞):");
    ctx.session.enableContactInput = true;
  } else {
    ctx.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π!");
  }
}

function handleContactInput(ctx) {
  if (ctx.session.enableContactInput) {
    const contact = ctx.message.text;
    orderFormData.contact = { phone_number: contact };
    requestReceivingMethod(ctx);
    ctx.session.enableContactInput = false;
  }
}

function handleDeliveryAddress(ctx) {
  if (ctx.session.enableDeliveryAddress) {
    const address = ctx.message.text;
    orderFormData.address = address;
    ctx.session.enableDeliveryAddress = false;
    requestPaymentMethod(ctx);
  }
}

function handleAttachFile(ctx) {
  if (ctx.session.attachBill) {
    const photoInfo = ctx.message.photo[ctx.message.photo.length - 1];
    bot.telegram.getFile(photoInfo.file_id).then((fileInfo) => {
      const fileUrl = `https://api.telegram.org/file/bot${token}/${fileInfo.file_path}`;
      const fileStream = fs.createWriteStream(fileInfo.file_path);
      request(fileUrl).pipe(fileStream);

      // –°–æ–±—ã—Ç–∏–µ 'finish' –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç, –∫–æ–≥–¥–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è
      fileStream.on("finish", () => {
        ctx.session.attachBill = false;
        bot.telegram.sendPhoto("-1001908353411", {
          source: `${fileInfo.file_path}`,
        });
        orderInfo(ctx);
      });

      // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    });
  }
}

function requestReceivingMethod(ctx) {
  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–°–∞–º–æ–≤—ã–≤–æ–∑", "pickup"),
    Markup.button.callback("–î–æ—Å—Ç–∞–≤–∫–∞", "delivery"),
  ]);

  ctx.reply("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑", inlineKeyboard);
}

function requestDeliveryAddress(ctx) {
  ctx.session.enableDeliveryAddress = true;
  ctx.reply("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏");
}

function requestPaymentMethod(ctx) {
  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–ö–∞—Ä—Ç–æ–π", "paymentCard"),
    Markup.button.callback("–ù–∞–ª–∏—á–Ω—ã–º–∏", "paymentCash"),
  ]);

  ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", inlineKeyboard);
}

function orderInfo(ctx) {
  const total = getCartContent(ctx, "add");
  const orderData = `–ó–∞–∫–∞–∑ #Ô∏è‚É£ ${orderNumber}\n\n ${total}\n\n`;
  ctx.reply(`${orderData} ‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω`);

  const order = {
    order: orderNumber,
    cart: total,
    contact: orderFormData.contact,
    address: orderFormData.address,
    bill: orderFormData.bill,
    payment: orderFormData.paymentMethod,
  };

  orders.push(order);
  saveOrdersToFile();

  const keyboard = mainMenu();
  ctx.reply("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", keyboard);

  const message = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!!!\n\n ${orderData}\n –°–≤—è–∑—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º: ${orderFormData.contact.phone_number}\n –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è: ${orderFormData.address}\n –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${orderFormData.paymentMethod}`;
  ctx.telegram.sendMessage("-1001908353411", message);
}

// Cart
function addToCart(productName, count, price) {
  const setPrice = parseFloat(price.replace(/\$/g, ""));
  if (!cart[productName]) {
    cart[productName] = {
      count: 0,
      total: 0,
    };
  }

  cart[productName].count += parseInt(count, 10);
  cart[productName].total += parseInt(count, 10) * parseFloat(setPrice);
}

function getCartContent(ctx, data) {
  let content = "";

  if (data === "add") {
    let totalOrderAmount = 0;

    for (const productName in cart) {
      const count = cart[productName].count;
      totalOrderAmount += cart[productName].total;
      const category = getCategoryByName(productName);

      if (category === "–¢—Ä–∞–≤–∞") {
        content += `üõç: ${productName}\nüóÇ: ${count} –≥—Ä\nüíµ: $${cart[
          productName
        ].total.toFixed(2)}\n\n`;
      } else {
        const total = cart[productName].total.toFixed(2);
        content += `üõç: ${productName}\nüóÇ: ${count} —à—Ç\nüíµ: $${total}\n\n`;
      }
    }
    content += `–ò—Ç–æ–≥–æ: $${totalOrderAmount.toFixed(2)}`;
    return content;
  } else if (data === "clear") {
    cart = {}; // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    content = "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.";
    ctx.reply(content);
  } else {
    return cart;
  }

  return content || "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞";
}

function getCategoryByName(productName) {
  for (const category in products) {
    const categoryProducts = products[category];
    const foundProduct = categoryProducts.find(
      (product) => product.name === productName
    );
    if (foundProduct) {
      return category;
    }
  }
  return null; // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
}

bot.action(/openGoods_(.+)/, (ctx) => {
  const [, category] = ctx.match;
  openGoods(ctx, category);
  ctx.answerCbQuery(`–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ ${category}`);
});

bot.action(/addToCart_(.+)_(.+)_(.+)/, (ctx) => {
  const [, name, count, price] = ctx.match;
  addToCart(`${name}`, `${count}`, `${price}`);
  ctx.answerCbQuery(`${name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${count}`);
});

bot.action("sendForm", (ctx) => {
  sendForm(ctx);
  ctx.answerCbQuery("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞");
});

bot.action("clearCart", (ctx) => {
  getCartContent(ctx, "clear");
});

bot.action("pickup", (ctx) => {
  orderFormData.address = "–°–∞–º–æ–≤—ã–≤–æ–∑";
  requestPaymentMethod(ctx);
  ctx.answerCbQuery("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–ø–ª–∞—Ç—ã");
});

bot.action("delivery", (ctx) => {
  requestDeliveryAddress(ctx);
});

bot.action("paymentCash", (ctx) => {
  orderFormData.paymentMethod = "–ù–∞–ª–∏—á–∫–∞";
  orderInfo(ctx);
});

bot.action("paymentCard", (ctx) => {
  orderFormData.paymentMethod = "–ö–∞—Ä—Ç–∞";
  getQrCode(ctx);
});

function getQrCode(ctx) {
  ctx.replyWithPhoto(
    { source: "./img/1.jpg" },
    { caption: "–í–∞—à QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã" }
  );
  ctx.session.attachBill = true;
  ctx.reply("–ö–∞–∫ —Å–æ–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –≤ —á–∞—Ç");
}

bot.use((ctx, next) => {
  if (ctx.message && ctx.message.text) {
    if (ctx.session.enableContactInput === true) {
      handleContactInput(ctx);
    } else if (ctx.session.enableDeliveryAddress === true) {
      handleDeliveryAddress(ctx);
    }
  } else {
    handleAttachFile(ctx);
  }
  next();
});

bot.launch();
