const TelegramBot = require("node-telegram-bot-api");
const bot = new TelegramBot("6987337400:AAHp2b4E7CngidB0nBFOqix6xW2rmQMp59E", {
  polling: true,
});

// Start-menu
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;

  const keyboard = {
    reply_markup: {
      keyboard: [["üìÅ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"], ["üõí –ö–æ—Ä–∑–∏–Ω–∞"]],
      resize_keyboard: true,
    },
  };

  bot.sendMessage(
    chatId,
    `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?`,
    keyboard
  );
});

//Variables
let cart = {};
const products = {
  –¢—Ä–∞–≤–∞: [
    {
      name: "–ü–æ—Ä–æ—à–æ–∫ –∏–∑ –ª–æ–±–∫–æ–≤—ã—Ö –≤–æ–ª–æ—Å",
      description: "–ï–±–æ—à–∏—Ç",
      price: "$9.99",
    },
    {
      name: "–ñ–≤–∞—á–∫–∞ —Å –ª–æ–±–∫–æ–≤—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏",
      description: "–ñ—É–π –∏ –µ–±–æ—à–∏",
      price: "$12.99",
    },
    {
      name: "–°—É—à–µ–Ω—ã–µ –ª–æ–±–∫–æ–≤—ã–µ –≤–æ–ª–æ—Å—ã",
      description: "–ö–∞–∫ —á–∏–ø—Å—ã, —Ç–æ–ª—å–∫–æ –≤–æ–ª–æ—Å–∞—Ç—ã–µ",
      price: "$7.99",
    },
  ],
  –ü–µ—á–µ–Ω—å–∫–∏: [
    {
      name: "–ü—Ä–æ—à–ª–æ–≥–æ–¥–Ω–∏–µ",
      description: "–ï–±–æ—à–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ",
      price: "$15.99",
    },
    {
      name: "–ü–µ—á–µ–Ω—å–∫–∏ —Å –∏–∑—é–º–æ–º",
      description: "–î–ª—è –≥—É—Ä–º–∞–Ω–æ–≤",
      price: "$18.99",
    },
    {
      name: "–ü–µ—á–µ–Ω—å–∫–∏ —Å —à–æ–∫–æ–ª–∞–¥–æ–º",
      description: "–®–æ–∫–æ–ª–∞–¥–Ω—ã–µ –≤–æ–ª–æ—Å—ã –≤–Ω—É—Ç—Ä–∏",
      price: "$22.99",
    },
  ],
  –ö–µ–∫—Å—ã: [
    {
      name: "–° –∑–∞–ø–∞—à–∫–æ–º",
      description: "–ï–±–æ—à–∏—Ç, –Ω–æ –ø–æ—Ç–æ–º —Ö–æ—á–µ—Ç—Å—è —Ç—Ä–∞–≤—ã",
      price: "$25.99",
    },
    {
      name: "–ö–µ–∫—Å —Å –º–∞–ª–∏–Ω–æ–π",
      description: "–ú–∞–ª–∏–Ω–æ–≤—ã–µ –≤–æ–ª–æ—Å—ã –¥–ª—è –∞—Ä–æ–º–∞—Ç–∞",
      price: "$28.99",
    },
    {
      name: "–ö–µ–∫—Å —Å –≤–∞–Ω–∏–ª—å—é",
      description: "–í–∞–Ω–∏–ª—å–Ω—ã–µ –≤–æ–ª–æ—Å—ã –≤ –∫–∞–∂–¥–æ–º –∫–µ–∫—Å–µ",
      price: "$30.99",
    },
  ],
  –ö–æ—Å—è–∫–∏: [
    {
      name: "–•—É–π –ø–æ–π–º–∏ —á—Ç–æ –±—ã–ª–æ —á–∞—Å –Ω–∞–∑–∞–¥",
      description: "–í—Å–µ –≤ –æ–¥–Ω–æ–º",
      price: "$35.99",
    },
    {
      name: "–°–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–æ—Å—è–∫–∏",
      description: "–¢–∞–π–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ –≤–æ–ª–æ—Å –∏ —Ç—Ä–∞–≤—ã",
      price: "$39.99",
    },
    {
      name: "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –∫–æ—Å—è–∫–∏",
      description: "–õ—É—á—à–∏–µ –∏–∑ –ª—É—á—à–∏—Ö",
      price: "$49.99",
    },
  ],
};

// Catalog
// General
bot.onText(/üìÅ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤/, (msg) => {
  const chatId = msg.chat.id;
  getCatalogs(chatId);
});

// Create categories menu
function getCatalogs(chat) {
  const inlineKeyboard = {
    reply_markup: {
      inline_keyboard: Object.keys(products).map((category) => [
        { text: category, callback_data: category },
      ]),
    },
  };

  bot.sendMessage(chat, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", inlineKeyboard);
}

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const category = query.data;

  openCategory(chatId, category);
  bot.answerCallbackQuery(query.id, `–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ ${category}`);
});

// Opening categories goods extends category name
function openCategory(chatId, category) {
  const categoryProducts = products[category];

  if (categoryProducts.length > 0) {
    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: categoryProducts.map((product) => [
          { text: product.name, callback_data: `add_to_cart_${product.id}` },
        ]),
      },
    };

    bot.sendMessage(chatId, category, inlineKeyboard);
  } else {
    bot.sendMessage(chatId, "–¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.");
  }
}
