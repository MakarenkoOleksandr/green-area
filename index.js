const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();

const token = process.env.BOT_TOKEN;
const bot = new Telegraf(token);

// Variables
let cart = {};
let orderFormData = {};
let { orderNumber, orders, saveOrdersToFile } = require("./modules/orders");
const products = require("./modules/catalog");

function mainMenu() {
  return Markup.keyboard([["üìÅ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"], ["üõí –ö–æ—Ä–∑–∏–Ω–∞"]]).resize();
}

bot.command("start", (ctx) => {
  const keyboard = mainMenu();
  ctx.reply(
    `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?`,
    keyboard
  );
});

// Main menu
bot.hears("üìÅ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", (ctx) => {
  const inlineKeyboard = Markup.inlineKeyboard(
    Object.keys(products).map((category) =>
      Markup.button.callback(`${category} üîΩ`, `openGoods_${category}`)
    )
  );
  ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", inlineKeyboard);
});

bot.hears("üõí –ö–æ—Ä–∑–∏–Ω–∞", (ctx) => {
  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "sendForm"),
    Markup.button.callback("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "clearCart"),
  ]);
  const cartContent = getCartContent(ctx, "add");
  ctx.replyWithHTML(
    `<b>üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n${cartContent}`,
    inlineKeyboard
  );
});

// Catalog__categories goods extends category name

function openGoods(ctx, name) {
  const categoryProducts = products[name];
  categoryProducts.forEach((product) => {
    const inlineKeyboard = Markup.inlineKeyboard([
      Markup.button.callback(
        "1Ô∏è‚É£",
        `addToCart_${product.name}_1_${product.price}`
      ),
      Markup.button.callback(
        "2Ô∏è‚É£",
        `addToCart_${product.name}_2_${product.price}`
      ),
      Markup.button.callback(
        "3Ô∏è‚É£",
        `addToCart_${product.name}_3_${product.price}`
      ),
      Markup.button.callback(
        "5Ô∏è‚É£",
        `addToCart_${product.name}_5_${product.price}`
      ),
      Markup.button.callback(
        "üîü",
        `addToCart_${product.name}_10_${product.price}`
      ),
    ]);
    if (name === "–¢—Ä–∞–≤–∞") {
      const content = `<b>üõç ${product.name}</b>\n${product.happy}\n${product.power}\n\nüíµ ${product.price}\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –≥—Ä:`;
      ctx.replyWithHTML(content, inlineKeyboard);
    } else {
      const content = `<b>üõç ${product.name}</b>\n${product.happy}\n${product.power}\n\nüíµ ${product.price}\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É —à—Ç:`;
      ctx.replyWithHTML(content, inlineKeyboard);
    }
  });
}

function sendForm(ctx) {
  const content = getCartContent(ctx, "check");
  if (Object.keys(content).length > 0) {
    ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç", {
      reply_markup: {
        keyboard: [[{ text: "üì≤ Send phone number", request_contact: true }]],
      },
    });
  } else {
    ctx.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π!");
  }
}

function requestPaymentMethod(ctx) {
  mainMenu();
  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–ö–∞—Ä—Ç–æ–π", "paymentCard"),
    Markup.button.callback("–ù–∞–ª–∏—á–Ω—ã–º–∏", "paymentCash"),
  ]);

  ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", inlineKeyboard);
}

// Cart
function addToCart(productName, count, price) {
  const setPrice = parseFloat(price.replace(/\$/g, ""));
  if (!cart[productName]) {
    cart[productName] = {
      count: 0,
      total: 0,
    };
  }

  cart[productName].count += parseInt(count, 10);
  cart[productName].total += parseInt(count, 10) * parseFloat(setPrice);
}

function getCartContent(ctx, data) {
  let content = "";

  if (data === "add") {
    let totalOrderAmount = 0;

    for (const productName in cart) {
      const count = cart[productName].count;
      totalOrderAmount += cart[productName].total;
      const category = getCategoryByName(productName);

      if (category === "–¢—Ä–∞–≤–∞") {
        content += `üõç: ${productName}\nüóÇ: ${count} –≥—Ä\nüíµ: $${cart[
          productName
        ].total.toFixed(2)}\n\n`;
      } else {
        const total = cart[productName].total.toFixed(2);
        content += `üõç: ${productName}\nüóÇ: ${count} —à—Ç\nüíµ: $${total}\n\n`;
      }
    }
    content += `–ò—Ç–æ–≥–æ: $${totalOrderAmount.toFixed(2)}`;
    return content;
  } else if (data === "clear") {
    cart = {}; // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    content = "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.";
    ctx.reply(content);
  } else {
    return cart;
  }

  return content || "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞";
}

function getCategoryByName(productName) {
  for (const category in products) {
    const categoryProducts = products[category];
    const foundProduct = categoryProducts.find(
      (product) => product.name === productName
    );
    if (foundProduct) {
      return category;
    }
  }
  return null; // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
}

bot.action(/openGoods_(.+)/, (ctx) => {
  const [, category] = ctx.match;
  openGoods(ctx, category);
  ctx.answerCbQuery(`–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ ${category}`);
});

bot.action(/addToCart_(.+)_(.+)_(.+)/, (ctx) => {
  const [, name, count, price] = ctx.match;
  addToCart(`${name}`, `${count}`, `${price}`);
  ctx.answerCbQuery(`${name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${count}`);
});

bot.action("sendForm", (ctx) => {
  sendForm(ctx);
  ctx.answerCbQuery("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞");
});

bot.action("clearCart", (ctx) => {
  getCartContent(ctx, "clear");
});

bot.use((ctx, next) => {
  if (ctx.update.message && ctx.update.message.contact) {
    orderFormData.contact = ctx.update.message.contact;
    requestPaymentMethod(ctx);
  } else if (ctx.update.callback_query) {
    orderFormData.paymentMethod = ctx.update.callback_query.data;

    // –î–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π

    const total = getCartContent(ctx, "add");
    const orderData = `–ó–∞–∫–∞–∑ #Ô∏è‚É£ ${orderNumber}\n\n ${total}\n\n`;
    ctx.reply(`${orderData} ‚òëÔ∏è –£—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω`);

    const order = {
      order: orderNumber,
      cart: total,
      contact: orderFormData.contact,
      payment: orderFormData.paymentMethod,
    };

    orders.push(order);
    saveOrdersToFile();

    const keyboard = mainMenu();
    ctx.reply("–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", keyboard);

    const message = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!!!\n\n ${orderData}\n ${orderFormData.contact.phone_number}\n ${orderFormData.paymentMethod}`;
    ctx.telegram.sendMessage("-1001908353411", message);
  }
  next();
});

bot.launch();
// bot.command("start", (ctx) => {
//   const inlineKeyboard = Markup.inlineKeyboard([
//     Markup.button.callback("RU", "ru"),
//     Markup.button.callback("EN", "en"),
//   ]);
//   ctx.reply("üåê", inlineKeyboard);
// });
