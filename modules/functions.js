const { Markup } = require("telegraf");
const products = require("./catalog");

let cart = {};

function openGoods(ctx, name) {
  const categoryProducts = products[name];
  categoryProducts.forEach((product) => {
    const inlineKeyboard = Markup.inlineKeyboard([
      Markup.button.callback(
        "1Ô∏è‚É£",
        `addToCart_${product.name}_1_${product.price}`
      ),
      Markup.button.callback(
        "2Ô∏è‚É£",
        `addToCart_${product.name}_2_${product.price}`
      ),
      Markup.button.callback(
        "3Ô∏è‚É£",
        `addToCart_${product.name}_3_${product.price}`
      ),
      Markup.button.callback(
        "5Ô∏è‚É£",
        `addToCart_${product.name}_5_${product.price}`
      ),
      Markup.button.callback(
        "üîü",
        `addToCart_${product.name}_10_${product.price}`
      ),
    ]);
    if (name === "–¢—Ä–∞–≤–∞") {
      const content = `<b>üõç ${product.name}</b>\n${product.happy}\n${product.power}\n\nüíµ ${product.price}\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É –≥—Ä:`;
      ctx.replyWithHTML(content, inlineKeyboard);
    } else {
      const content = `<b>üõç ${product.name}</b>\n${product.happy}\n${product.power}\n\nüíµ ${product.price}\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É —à—Ç:`;
      ctx.replyWithHTML(content, inlineKeyboard);
    }
  });
}

function sendForm(ctx) {
  const content = getCartContent(ctx, "check");
  if (Object.keys(content).length > 0) {
    ctx.reply("Send me your number please", {
      reply_markup: {
        keyboard: [[{ text: "üì≤ Send phone number", request_contact: true }]],
      },
    });
  } else {
    ctx.reply("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π!");
  }
}

function addToCart(productName, count, price) {
  const setPrice = parseFloat(price.replace(/\$/g, ""));
  if (!cart[productName]) {
    cart[productName] = {
      count: 0,
      total: 0,
    };
  }

  cart[productName].count += parseInt(count, 10);
  cart[productName].total += parseInt(count, 10) * parseFloat(setPrice);
}

function getCartContent(ctx, data) {
  let content = "";

  if (data === "add") {
    let totalOrderAmount = 0;

    for (const productName in cart) {
      const count = cart[productName].count;
      totalOrderAmount += cart[productName].total;
      const category = getCategoryByName(productName);

      if (category === "–¢—Ä–∞–≤–∞") {
        content += `üõç: ${productName}\nüóÇ: ${count} –≥—Ä\nüíµ: $${cart[
          productName
        ].total.toFixed(2)}\n\n`;
      } else {
        content += `üõç: ${productName}\nüóÇ: ${count} —à—Ç\nüíµ: $${cart[
          productName
        ].total.toFixed(2)}\n\n`;
      }
    }

    content += `–ò—Ç–æ–≥–æ: $${totalOrderAmount.toFixed(2)}`;
  } else if (data === "clear") {
    cart = {}; // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    content = "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.";
    ctx.reply(content);
  } else {
    return cart;
  }

  return content || "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞";
}

function getCategoryByName(productName) {
  for (const category in products) {
    const categoryProducts = products[category];
    const foundProduct = categoryProducts.find(
      (product) => product.name === productName
    );
    if (foundProduct) {
      return category;
    }
  }
  return null; // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
}

function requestPaymentMethod(ctx) {
  const inlineKeyboard = Markup.inlineKeyboard([
    Markup.button.callback("–ö–∞—Ä—Ç–æ–π", "paymentCard"),
    Markup.button.callback("–ù–∞–ª–∏—á–Ω—ã–º–∏", "paymentCash"),
  ]);

  ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", inlineKeyboard);
}

module.exports = {
  openGoods,
  sendForm,
  addToCart,
  getCartContent,
  requestPaymentMethod,
};
