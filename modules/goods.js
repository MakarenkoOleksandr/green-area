const TelegramBot = require("node-telegram-bot-api");
require("dotenv").config();

const token = process.env.BOT_TOKEN;
const bot = new TelegramBot(token, {
  polling: true,
});
// Start-menu
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const keyboard = mainMenu();
  bot.sendMessage(
    chatId,
    `–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω. –ö–∞–∫ —è –º–æ–≥—É –ø–æ–º–æ—á—å?`,
    keyboard
  );
});

//Variables
let cart = {};
let orderFormData = {};
const products = require("./modules/catalog");

function mainMenu() {
  const keyboard = {
    reply_markup: {
      keyboard: [["üìÅ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤"], ["üõí –ö–æ—Ä–∑–∏–Ω–∞"]],
      resize_keyboard: true,
    },
  };
  return keyboard;
}

// Main menu
bot.onText(/üìÅ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤/, (msg) => {
  const chatId = msg.chat.id;
  const inlineKeyboard = {
    reply_markup: {
      inline_keyboard: Object.keys(products).map((category) => [
        { text: `${category} üîΩ`, callback_data: `openGoods_${category}` },
      ]),
    },
  };
  bot.sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", inlineKeyboard);
});

bot.onText(/üõí –ö–æ—Ä–∑–∏–Ω–∞/, (msg) => {
  const chatId = msg.chat.id;
  const inlineKeyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data: "sendForm",
          },
        ],
        [
          {
            text: "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
            callback_data: "clearCart",
          },
        ],
      ],
    },
  };
  const cartContent = getCartContent((data = "add"));
  bot.sendMessage(chatId, `–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n${cartContent}`, inlineKeyboard);
});

// Catalog__categories goods extends category name

function openGoods(chat, name) {
  const categoryProducts = products[name];
  categoryProducts.forEach((product) => {
    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "1Ô∏è‚É£",
              callback_data: `addToCart_1_${name}`,
            },
            {
              text: "2Ô∏è‚É£",
              callback_data: `addToCart_2_${name}`,
            },
            {
              text: "3Ô∏è‚É£",
              callback_data: `addToCart_3_${name}`,
            },
            {
              text: "5Ô∏è‚É£",
              callback_data: `addToCart_5_${name}`,
            },
            {
              text: "üîü",
              callback_data: `addToCart_10_${name}`,
            },
          ],
        ],
      },
    };

    const content = `<b>${product.name}</b>\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${product.happy}\n${product.power}\n<b>–¶–µ–Ω–∞:</b> ${product.price}\n<img></img>`;

    bot.sendMessage(chat, content, { parse_mode: "HTML", ...inlineKeyboard });
  });
  // `${product.name}\n${product.happy}\n${product.power}\n${product.price}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ:`,
}

function sendForm(chat) {
  const content = getCartContent((data = "check"));
  if (Object.keys(content).length > 0) {
    const formMessage = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:";
    const inlineKeyboard = {
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
              callback_data: "sendPhoneNumber",
              request_contact: true,
            },
          ],
        ],
      },
    };
    bot.sendMessage(chat, formMessage, inlineKeyboard);
  } else {
    bot.sendMessage(chat, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –ø—É—Å—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π!");
  }
}
// Cart
function addToCart(productId) {
  if (!cart[productId]) {
    cart[productId] = 0;
  }
  cart[productId]++;
}

function getCartContent(data, chat) {
  let content = "";

  if (data === "add") {
    for (const productId in cart) {
      content += `–¢–æ–≤–∞—Ä ${productId}: ${cart[productId]} —à—Ç.\n`;
    }
  } else if (data === "clear") {
    cart = {}; // –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    content = "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.";
    bot.sendMessage(chat, `${content}`);
  } else {
    return cart;
  }
  return content || "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞";
}

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const data = query.data.split("_");

  if (data[0] === "openGoods") {
    openGoods(chatId, data[1]);
    bot.answerCallbackQuery(query.id, `–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ ${data[1]}`);
  } else if (data[0] === "addToCart") {
    addToCart(data[1]);
    bot.answerCallbackQuery(query.id, `–¢–æ–≤–∞—Ä ${data[1]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É`);
  } else if (data[0] === "sendForm") {
    sendForm(chatId);
    bot.answerCallbackQuery(query.id, "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞");
  } else if (data[0] === "clearCart") {
    getCartContent("clear", chatId);
  } else if (data[0] === "sendPhoneNumber") {
    requestPaymentMethod(chatId);
  } else if (data[0] === "paymentCard" || data[0] === "paymentCash") {
    orderFormData[chatId] = {
      contact: orderFormData[chatId]?.contact || "–ù–µ —É–∫–∞–∑–∞–Ω",
      paymentMethod: data[0] === "paymentCard" ? "–ö–∞—Ä—Ç–æ–π" : "–ù–∞–ª–∏—á–Ω—ã–º–∏",
    };
    bot.answerCallbackQuery(query.id, `–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${data[0]}`);
    const ownerMessage = `–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n–ö–æ–Ω—Ç–∞–∫—Ç: ${orderFormData[chat].contact}\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ${method}`;

    const contact = msg.contact.phone_number;
    orderFormData[chatId] = {
      contact,
      paymentMethod: "–ù–µ –≤—ã–±—Ä–∞–Ω",
    };
    bot.sendMessage(chatId, `–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${contact}`);
  }
});

function requestPaymentMethod(chat) {
  bot.sendMessage(chat, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –¥–ª—è –≤–∞—Å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: "–ö–∞—Ä—Ç–æ–π",
            callback_data: "paymentCard",
          },
        ],
        [
          {
            text: "–ù–∞–ª–∏—á–Ω—ã–º–∏",
            callback_data: "paymentCash",
          },
        ],
      ],
    },
  });
}
